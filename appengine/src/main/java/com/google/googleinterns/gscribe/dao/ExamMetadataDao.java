/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.googleinterns.gscribe.dao;

import com.google.googleinterns.gscribe.models.ExamMetadata;
import org.skife.jdbi.v2.StatementContext;
import org.skife.jdbi.v2.sqlobject.*;
import org.skife.jdbi.v2.sqlobject.customizers.Mapper;
import org.skife.jdbi.v2.tweak.ResultSetMapper;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public interface ExamMetadataDao {

    /**
     * Called to retrieve exam metadata of an exam created by the user identified by user id userID
     * Queries exam metadata of a particular exam identified by examID and created by user identified by userID
     * The userID is a unique user id generated by google for the user
     * Combination of examID and userID is used to query to avoid querying exam metadata of exam created by another user
     *
     * @param examID ( to identify particular exam )
     * @param userID ( unique user id of user, here paper setter )
     * @return exam metadata object
     */
    @Mapper(ExamMetadataDao.ExamMetadataMapper.class)
    @SqlQuery("SELECT * from exam where id = :exam_id and created_by=:user_id")
    ExamMetadata getExamMetadataByUser(@Bind("exam_id") int examID, @Bind("user_id") String userID);

    /**
     * Called when examinee starts the exam and for exam object, exam metadata needs to be queried
     * Called when examinee submits the exam and for writing responses back to the spreadsheet, spreadsheet if of exam is needed
     * Queries exam metadata of a particular exam identified by examID
     * Called for dialogflow exam start request
     *
     * @param examID ( to identify particular exam )
     * @return exam metadata object
     */
    @Mapper(ExamMetadataDao.ExamMetadataMapper.class)
    @SqlQuery("SELECT * from exam where id = :exam_id")
    ExamMetadata getExamMetadataByExamId(@Bind("exam_id") int examID);

    /**
     * Called to populate exam metadata table on paper setter dashboard
     * Queries list of exam metadata of exams created by user identified by userID
     *
     * @param userID ( unique user id of user, here paper setter )
     * @return list of exam metadata
     */
    @Mapper(ExamMetadataDao.ExamMetadataMapper.class)
    @SqlQuery("SELECT * from exam where created_by = :user_id")
    List<ExamMetadata> getExamMetadataListByUser(@Bind("user_id") String userID);

    /**
     * Called for creation of new exam
     * created_by takes userID which is unique user ID of the user requesting to submit the exam
     * spreadsheetID is the spreadsheet id of spreadsheet where the question paper is
     * duration is the duration of exam
     * creation time of exam is automatically set to current timestamp and exam id of newly created exam is returned
     *
     * @param examMetadata ( exam metadata object )
     * @return exam id for newly created exam
     */
    @SqlUpdate("INSERT INTO exam( created_by, spreadsheet_id, duration ) VALUES ( :userID, :spreadsheetID, :duration )")
    @GetGeneratedKeys
    int insertExamMetadata(@BindBean ExamMetadata examMetadata);

    /**
     * A Mapper class to map ExamMetadata responses to exam metadata object
     */
    class ExamMetadataMapper implements ResultSetMapper<ExamMetadata> {
        @Override
        public ExamMetadata map(int i, ResultSet resultSet, StatementContext statementContext) throws SQLException {
            return new ExamMetadata(
                    resultSet.getString("spreadsheet_id"),
                    resultSet.getInt("duration"),
                    resultSet.getInt("id"),
                    resultSet.getTimestamp("created_on")
            );
        }
    }

}
